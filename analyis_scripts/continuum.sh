#!/bin/bash

# This script extracts various information about the isomerization
# kinetics of the system. From the data generated by the simulations,
# it generates the following files:
#  - 2 files listing the momentary state of specific isomer, being either trans or cis
#  - 2 files listing whether a certain isomer has switched (t->c) or (c->t) at a specific time
# These files can then be used for further statistical analysis. For instance,
# one can analyze the total numer of trans or cis isomers over time, the isomerization rates,
# the min/max/average time between switching events, etc.

###############################################################################################
# Use this script by placing it in the parent folder of the directories containing the MD data
# Execute as "sh continuum.sh"

tc_names=$(find . -type f -name 'tc_ids_*txt' | sort -n -t _ -k 3)
ct_names=$(find . -type f -name 'ct_ids_*.txt' | sort -n -t _ -k 3)
trans_names=$(find . -type f -name 'azid_trans_*.txt' | sort -n -t _ -k 3)
cis_names=$(find . -type f -name 'azid_cis_*.txt' | sort -n -t _ -k 3)


# Foldername where to save this file
foldername="TRANS_CIS_CONTINUUM"

mkdir -p "$foldername"



# Generate file that contains a 1 (trans) or a 0 (cis) for each azo group,
# for all MD snapshots

echo "TRANS"
i=0
var=""
for item in $trans_names; do

	mycol=$(awk '{print $2}' "$item")
	
        cd "$foldername"
        if [ $i -eq 0 ]; then
                echo "$mycol" > trans_CONT.txt
        else
		echo "$mycol" > new_buffer.txt
		cp trans_CONT.txt trans_buffer.txt
		paste -d' ' trans_buffer.txt new_buffer.txt > trans_CONT.txt
		rm trans_buffer.txt new_buffer.txt
        fi

        i=$((i+1))

        cd ..
done


# Generate file that contains a 0 (trans) or a 1 (cis) for each azo group,
# for all MD snapshots
# This is sort of redundant due to the above file.

echo "CIS"
i=0
var=""
for item in $cis_names; do

        mycol=$(awk '{print $2}' "$item")

        cd "$foldername"
        if [ $i -eq 0 ]; then
                echo "$mycol" > cis_CONT.txt
        else
                echo "$mycol" > new_buffer.txt
                cp cis_CONT.txt cis_buffer.txt
                paste -d' ' cis_buffer.txt new_buffer.txt > cis_CONT.txt
                rm cis_buffer.txt new_buffer.txt
        fi

        i=$((i+1))

        cd ..
done


# Generate file that contains a 1 (trans->cis) or a 0 (no such switching event )
# for each azo group, for all MD snapshots

echo "TRANS-to-CIS"
i=0
var=""
for item in $tc_names; do

        mycol=$(awk '{print $2}' "$item")

        cd "$foldername"
        if [ $i -eq 0 ]; then
                echo "$mycol" > tc_CONT.txt
        else
                echo "$mycol" > new_buffer.txt
                cp tc_CONT.txt tc_buffer.txt
                paste -d' ' tc_buffer.txt new_buffer.txt > tc_CONT.txt
                rm tc_buffer.txt new_buffer.txt
        fi

        i=$((i+1))

        cd ..
done



# Generate file that contains a 1 (cis->trans) or a 0 (no such switching event)
# for each azo group, for all MD snapshots

echo "CIS-to-TRANS"
i=0
var=""
for item in $ct_names; do

        mycol=$(awk '{print $2}' "$item")

        cd "$foldername"
        if [ $i -eq 0 ]; then
                echo "$mycol" > ct_CONT.txt
        else
                echo "$mycol" > new_buffer.txt
                cp ct_CONT.txt ct_buffer.txt
                paste -d' ' ct_buffer.txt new_buffer.txt > ct_CONT.txt
                rm ct_buffer.txt new_buffer.txt
        fi

        i=$((i+1))

        cd ..
done

